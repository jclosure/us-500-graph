extends layout

block content
  h1= title

  p
   | This is an app to present a small domain representing the us-500 dataset&nbsp;
   a(href='https://github.com/jclosure/us-500-graph', target='_blank') US-500-Graph
   |  from JClosure. It uses Node.js and the&nbsp;
   a(href='https://github.com/thingdom/node-neo4j', target='_blank') node-neo4j
   |  library, available on npm as&nbsp;
   code neo4j
   .

   p.
     This app implements the exercises found here:

    - obj = [ "Exercise A (Extra Credit Approach)", "Exercise B", "Exercise C" ]
    ul
      li #{obj[0]}
      li #{obj[1]}
      li #{obj[2]}
   p.
     This app is also simple social network manager: it lets you add and remove
     companies and "follows" relationships between them.

   p
    strong
      | Work with models:&nbsp;
      a(href='/companies') View all companies
      a(href='/people') View all employees
    
  #alchemy.alchemy
      
  script.
  
    var user = 'neo4j',
        password = 'admin',
        endpoint = 'http://localhost:7474/db/data/transaction/commit';
        
    var data = { 
      statements: [{
        statement: 'MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n,r,m LIMIT 100',
        resultDataContents: ["graph"],
        includeStats: false
      }]
    };

    
    var nodesTable = null;
    var linksTable = null;
    var network = null;

    google.load('visualization', '1');

    // Set callback to run when API is loaded
    google.setOnLoadCallback(drawVisualization); 

    // Called when the Visualization API is loaded.
    function drawVisualization() {
     // Create and populate a data table.
     nodesTable = new google.visualization.DataTable();
     nodesTable.addColumn('number', 'id');
     nodesTable.addColumn('number', 'value');
     nodesTable.addColumn('string', 'text');
     nodesTable.addColumn('string', 'style');
     nodesTable.addColumn('string', 'group');

     // randomly create some nodes
     nodesTable.addRow([1, undefined, 'circle', 'circle', 'group_x']);
     nodesTable.addRow([2, undefined, 'circle', 'circle', 'group_x']);
     nodesTable.addRow([3, undefined, 'database', 'database', 'group_x']);
     nodesTable.addRow([4, undefined, 'rect', 'rect', 'group_x']);

     linksTable = new google.visualization.DataTable();
     linksTable.addColumn('number', 'from');
     linksTable.addColumn('number', 'to');
     linksTable.addColumn('string', 'style');
     linksTable.addColumn('string', 'color');
     linksTable.addColumn('number', 'width');
     linksTable.addRow([3, 1, 'arrow', undefined, 1]);
     linksTable.addRow([1, 4, 'moving-dot', undefined, 1]);
     linksTable.addRow([1, 2, 'moving-arrows', undefined, 2]);

     var mainId = 5;
     nodesTable.addRow([mainId, undefined, 'styles\nand\nsizes', 'rect', 'group_main']);
     var styles = ['dot', 'square', 'triangle', 'triangleDown', 'star'];
     var id = 6;
     for (var size = 1; size < 4; size++) {
       var groupId = id;
       nodesTable.addRow([id, undefined, 'size ' + size, 'rect', 'group' + size]);
       linksTable.addRow([mainId, groupId, undefined, 'gray', size]);          
       id++;

       for (var i in styles) {
         if (styles.hasOwnProperty(i)) {
           nodesTable.addRow([id, size, styles[i], styles[i], 'group' + size]);
           linksTable.addRow([groupId, id, undefined, 'gray', size]);
           id++;
         }
       }
     }

     // specify options
     var options = {
       'width':  '780px', 
       'height': '600px',
       'stabilize': false,
     };

     // Instantiate our graph object.
     network = new links.Network(document.getElementById('alchemy'));

     // Draw our graph with the created data and options 
     network.draw(nodesTable, linksTable, options);
    }


client
    .post(endpoint)
    .send(data)
    .auth(user, password)
    .set('Accept', 'application/json')
    .end(function(err, res){

      //debugger;

      if (firstResult =  res.body.results[0]) {

        jsonObj = asGraphJSON(firstResult);




      }

    });
  

