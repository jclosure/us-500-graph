extends layout

block content
  h1= title

  p
   | This is an app to present a small domain representing the us-500 dataset&nbsp;
   a(href='https://github.com/jclosure/us-500-graph', target='_blank') US-500-Graph
   |  from JClosure. It uses Node.js and the&nbsp;
   a(href='https://github.com/thingdom/node-neo4j', target='_blank') node-neo4j
   |  library, available on npm as&nbsp;
   code neo4j
   .

   p.
     This app implements the exercises found here:

    - obj = [ "Exercise A (Extra Credit Approach)", "Exercise B", "Exercise C" ]
    ul
      li #{obj[0]}
      li #{obj[1]}
      li #{obj[2]}
   p.
     This app is also simple social network manager: it lets you add and remove
     companies and "follows" relationships between them.

   p
    strong
      | Work with models:&nbsp;
      a(href='/companies') View all companies
      a(href='/people') View all employees
    
  #alchemy.alchemy
      
  script.
  
    var user = 'neo4j',
        password = 'admin',
        endpoint = 'http://localhost:7474/db/data/transaction/commit';
        
    var data = { 
      statements: [{
        statement: 'MATCH (n) OPTIONAL MATCH (n)-[r]->(m) RETURN n,r,m LIMIT 100',
        resultDataContents: ["graph"],
        includeStats: false
      }]
    };
    
    client
        .post(endpoint)
        .send(data)
        .auth(user, password)
        .set('Accept', 'application/json')
        .end(function(err, res){
          
          //debugger;

          if (firstResult =  res.body.results[0]) {
          
            //- reference: http://graphalchemist.github.io/Alchemy/#/docs
            var jsonObj = firstResult.data.reduce(function(accum, result) {

              // graphJSON node exemplar
              //- {
              //-   "caption": "Children of the Corn III: Urban Harvest",
              //-   "type": "movie",
              //-   "id": 626470
              //- }

              var defaultTypeLabel = 'name';

              result.graph.nodes.forEach(function(node) {
                accum.nodes.push({
                  id: node.id,
                  type: node.labels[0],
                  caption: node.properties[defaultTypeLabel] ||  
                        node.properties[Object.keys(node.properties)[0]] || 
                        node.id
                });
              });

              // graphJSON edge exemplar
              //- {
              //-   "source": 314003,
              //-   "target": 595702,
              //-   "caption": "NOMINATED"
              //- }

              result.graph.relationships.forEach(function(rel) {
                accum.edges.push({
                  source: rel.startNode,
                  target: rel.endNode,
                  caption: rel.type
                });
              });

              return accum;

            }, {
              nodes: [],
              edges: [] 
            });



            //alchemy viz
            var config = {
              dataSource: jsonObj
            };

            alchemy = new Alchemy(config);
          }
          
        });
  
